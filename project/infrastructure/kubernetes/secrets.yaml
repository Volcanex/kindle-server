# Kubernetes Secrets for Kindle Content Server
# NOTE: This is a template. In production, secrets should be created through
# sealed-secrets, external secret operators, or Google Secret Manager

apiVersion: v1
kind: Secret
metadata:
  name: kindle-server-secrets
  namespace: kindle-server
  labels:
    app: kindle-server
type: Opaque
data:
  # Database credentials (base64 encoded)
  # These should be populated from Google Secret Manager
  DATABASE_URL: ""  # postgresql://user:pass@host:port/db
  DB_PASSWORD: ""
  
  # JWT secrets
  JWT_SECRET_KEY: ""
  JWT_REFRESH_SECRET_KEY: ""
  
  # Flask secret key
  SECRET_KEY: ""
  
  # Google Cloud service account key (for local development only)
  GOOGLE_APPLICATION_CREDENTIALS_JSON: ""
  
  # OAuth credentials for IAP
  OAUTH_CLIENT_ID: ""
  OAUTH_CLIENT_SECRET: ""
  
  # Redis password (if using Redis with authentication)
  REDIS_PASSWORD: ""
  
  # External API keys
  NEWS_API_KEY: ""
  SENDGRID_API_KEY: ""
  
  # Encryption keys for sensitive data
  DATA_ENCRYPTION_KEY: ""
  FILE_ENCRYPTION_KEY: ""
---
# SSL/TLS certificates
apiVersion: v1
kind: Secret
metadata:
  name: kindle-server-ssl-certs
  namespace: kindle-server
  labels:
    app: kindle-server
type: kubernetes.io/tls
data:
  # SSL certificate and private key (base64 encoded)
  tls.crt: ""
  tls.key: ""
  ca.crt: ""   # Certificate Authority certificate
---
# Docker registry credentials
apiVersion: v1
kind: Secret
metadata:
  name: kindle-server-registry-secret
  namespace: kindle-server
  labels:
    app: kindle-server
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: ""  # Docker config JSON for private registry access
---
# OAuth client credentials for IAP
apiVersion: v1
kind: Secret
metadata:
  name: oauth-client-secret
  namespace: kindle-server
  labels:
    app: kindle-server
type: Opaque
data:
  client_id: ""
  client_secret: ""
---
# Database SSL certificates
apiVersion: v1
kind: Secret
metadata:
  name: kindle-server-db-ssl
  namespace: kindle-server
  labels:
    app: kindle-server
type: Opaque
data:
  client-cert.pem: ""
  client-key.pem: ""
  server-ca.pem: ""
---
# External Secrets Operator configuration (recommended approach)
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: kindle-server-secret-store
  namespace: kindle-server
spec:
  provider:
    gcpsm:
      projectId: "kindle-content-server"
      auth:
        workloadIdentity:
          clusterLocation: us-central1
          clusterName: kindle-cluster
          serviceAccountRef:
            name: kindle-server
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kindle-server-external-secrets
  namespace: kindle-server
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: kindle-server-secret-store
    kind: SecretStore
  target:
    name: kindle-server-secrets
    creationPolicy: Owner
  data:
  - secretKey: DATABASE_URL
    remoteRef:
      key: kindle-server-db-connection
  - secretKey: JWT_SECRET_KEY
    remoteRef:
      key: kindle-server-jwt-secret
  - secretKey: SECRET_KEY
    remoteRef:
      key: kindle-server-flask-secret
  - secretKey: REDIS_PASSWORD
    remoteRef:
      key: kindle-server-redis-password
  - secretKey: NEWS_API_KEY
    remoteRef:
      key: kindle-server-news-api-key
  - secretKey: SENDGRID_API_KEY
    remoteRef:
      key: kindle-server-sendgrid-api-key
  - secretKey: DATA_ENCRYPTION_KEY
    remoteRef:
      key: kindle-server-data-encryption-key
---
# Sealed Secret example (alternative approach)
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: kindle-server-sealed-secrets
  namespace: kindle-server
spec:
  encryptedData:
    # These would be encrypted using kubeseal
    DATABASE_URL: ""
    JWT_SECRET_KEY: ""
    SECRET_KEY: ""
  template:
    metadata:
      name: kindle-server-secrets
      namespace: kindle-server
    type: Opaque