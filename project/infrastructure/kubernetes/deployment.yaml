# Kubernetes Deployment for Kindle Content Server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kindle-server
  namespace: kindle-server
  labels:
    app: kindle-server
    version: v1.0.0
    component: backend
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: kindle-server
      component: backend
  template:
    metadata:
      labels:
        app: kindle-server
        component: backend
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: kindle-server
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: app
        image: us-central1-docker.pkg.dev/PROJECT_ID/kindle-server-repo/kindle-server:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: PORT
          value: "8080"
        - name: ENVIRONMENT
          value: "production"
        - name: PROJECT_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['project-id']
        - name: REGION
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['region']
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        envFrom:
        - secretRef:
            name: kindle-server-secrets
        - configMapRef:
            name: kindle-server-config
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 3
          timeoutSeconds: 5
          failureThreshold: 10
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: app-logs
          mountPath: /app/logs
        - name: ssl-certs
          mountPath: /app/ssl
          readOnly: true
      volumes:
      - name: tmp
        emptyDir: {}
      - name: app-logs
        emptyDir: {}
      - name: ssl-certs
        secret:
          secretName: kindle-server-ssl-certs
          defaultMode: 0400
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - kindle-server
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "preemptible"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      nodeSelector:
        kubernetes.io/arch: amd64
---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: kindle-server-hpa
  namespace: kindle-server
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: kindle-server
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: kindle-server-pdb
  namespace: kindle-server
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: kindle-server
      component: backend